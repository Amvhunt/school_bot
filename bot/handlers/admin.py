from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from bot.keyboards.admin_kb import get_admin_main_kb, get_users_classes_kb, get_finance_kb, get_reports_kb, get_events_kb, get_messages_kb, get_applications_kb, get_back_kb
from bot.database import crud

class AdminStates(StatesGroup):
    main_menu = State()
    add_expense = State()
    create_event = State()
    create_message = State()

async def admin_menu(message: types.Message):
    text = "üîê **–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å**\n\n" \
           "–í—ñ—Ç–∞—é, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–µ! –û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–æ—é:"
    
    await message.answer(text, reply_markup=get_admin_main_kb(), parse_mode="Markdown")

async def handle_admin_callback(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    
    # Main menu sections
    if data == "admin_users_classes":
        text = "üë• **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Ç–∞ –ö–ª–∞—Å–∏**\n\n" \
               "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏, –∫–ª–∞—Å–∞–º–∏ —Ç–∞ —É—á–Ω—è–º–∏ —Å–∏—Å—Ç–µ–º–∏"
        await callback_query.message.edit_text(text, reply_markup=get_users_classes_kb(), parse_mode="Markdown")
        
    elif data == "admin_finance":
        text = "üí∞ **–§—ñ–Ω–∞–Ω—Å–∏**\n\n" \
               "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∞–º–∏, –±–∞–ª–∞–Ω—Å–∞–º–∏ —Ç–∞ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–º–∏ –æ–ø–µ—Ä–∞—Ü—ñ—è–º–∏"
        await callback_query.message.edit_text(text, reply_markup=get_finance_kb(), parse_mode="Markdown")
        
    elif data == "admin_reports":
        text = "üìä **–ó–≤—ñ—Ç–∏**\n\n" \
               "–ü–µ—Ä–µ–≥–ª—è–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –±–∞–ª–∞–Ω—Å—ñ–≤ —Ç–∞ –µ–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö"
        await callback_query.message.edit_text(text, reply_markup=get_reports_kb(), parse_mode="Markdown")
        
    elif data == "admin_events":
        text = "üéØ **–ó–±–æ—Ä–∏ —Ç–∞ –ü–æ–¥—ñ—ó**\n\n" \
               "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–±–æ—Ä–∞–º–∏, –ø–æ–¥—ñ—è–º–∏ —Ç–∞ –∑–∞—Ö–æ–¥–∞–º–∏"
        await callback_query.message.edit_text(text, reply_markup=get_events_kb(), parse_mode="Markdown")
        
    elif data == "admin_messages":
        text = "üì® **–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è**\n\n" \
               "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —Å–∏—Å—Ç–µ–º–∏"
        await callback_query.message.edit_text(text, reply_markup=get_messages_kb(), parse_mode="Markdown")
        
    elif data == "admin_applications":
        text = "üìã **–ó–∞—è–≤–∫–∏**\n\n" \
               "–û–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Ç–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É"
        await callback_query.message.edit_text(text, reply_markup=get_applications_kb(), parse_mode="Markdown")
    
    # Finance section handlers
    elif data == "admin_pending_payments":
        text = "üí≥ **–ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è**\n\n" \
               "üìã –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ"
        await callback_query.message.edit_text(text, reply_markup=get_back_kb("admin_finance"), parse_mode="Markdown")
    
    # Users section handlers  
    elif data == "admin_users_list":
        text = "üë• **–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n" \
               "üìã –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ"
        await callback_query.message.edit_text(text, reply_markup=get_back_kb("admin_users_classes"), parse_mode="Markdown")
    
    elif data == "admin_classes_list":
        text = "üè´ **–°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—ñ–≤**\n\n" \
               "üìã –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–ª–∞—Å—ñ–≤ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ"
        await callback_query.message.edit_text(text, reply_markup=get_back_kb("admin_users_classes"), parse_mode="Markdown")
    
    # Back navigation
    elif data == "admin_back_main":
        await admin_menu(callback_query.message)
    
    # Placeholder handlers for other actions
    else:
        text = f"üöß **–§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ**\n\n" \
               f"–§—É–Ω–∫—Ü—ñ—è '{data}' —â–µ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.\n" \
               f"–ù–µ–∑–∞–±–∞—Ä–æ–º –±—É–¥–µ –¥–æ–¥–∞–Ω–∞!"
        await callback_query.message.edit_text(text, reply_markup=get_back_kb(), parse_mode="Markdown")
    
    await callback_query.answer()
